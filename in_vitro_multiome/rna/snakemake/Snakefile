
import os
from re import search
import getpass


############
## Config ##
############
configfile: "config.yaml"

###########
## Rules ##
###########

rule all:
    input: 
        # Create Seurat and SingleCellExperiment objects
        config["directories"]["processed_data"]+"/seurat.rds",
        config["directories"]["processed_data"]+"/SingleCellExperiment.rds",

        # QC
        config["directories"]["results"]+"/rna/qc/sample_metadata_after_qc.txt.gz",

        # Doublet detection
        expand(config["directories"]["results"]+"/rna/doublet_detection/doublets_{sample}.txt.gz", 
            sample = config["samples"]),
        config["directories"]["results"]+"/rna/doublet_detection/sample_metadata_after_doublets.txt.gz",

        # Mapping
        expand("%s/rna/mapping/mapping_mnn_{sample}.txt.gz" % config["directories"]["results"], sample=config["samples"]),
        config["directories"]["results"]+"/rna/mapping/sample_metadata_after_mapping.txt.gz",
        config["directories"]["results"]+"/rna/mapping/pdf/umap_mapped_allcells.pdf",

        # plot cell-type proportions
        expand("%s/rna/celltype_proportions/{celltype_label}/finished.txt"  % (config["directories"]["results"]),
            celltype_label = config["plot_celltype_proportions"]["celltype_label"]),
        # Create anndata
        config["directories"]["processed_data"]+"/anndata.h5ad",

        # Pseudobulk
        expand("%s/rna/pseudobulk/{group_by}/SingleCellExperiment_pseudobulk.rds" % config["directories"]["results"], group_by=config["pseudobulk_rna"]["group_by"]),
        expand("%s/rna/pseudobulk/{group_by}/SingleCellExperiment_pseudobulk_with_replicates.rds" % config["directories"]["results"], group_by=config["pseudobulk_rna"]["group_by"]),

        # Dimensionality reduction
        expand("%s/rna/dimensionality_reduction/sce/{batch_correction}/pca_features{dimred_sce_features}_pcs{dimred_sce_npcs}.txt.gz" % (config["directories"]["results"]), 
            batch_correction = config["dimensionality_reduction_sce"]["batch_correction"], 
            dimred_sce_features = config["dimensionality_reduction_sce"]["features"], 
            dimred_sce_npcs = config["dimensionality_reduction_sce"]["npcs"]
            )#,

        ## Cell type validation (TO FINISH)
        #expand(config["directories"]["results"]+"/rna/celltype_validation/single_cells/umap_{celltype_validation_sc_celltype}_markers.pdf",
        #     celltype_validation_sc_celltype=config["celltypes"]
        #     )#,
        # expand(config["directories"]["results"]+"/rna/celltype_validation/pseudobulk/{group_by}/completed.txt", 
        #     group_by=config["pseudobulk_rna"]["group_by"]
        #     ),

        ## Differential expression between cell types
        # expand(config["directories"]["results"]+"/rna/differential/cells/celltype/{celltypeA}_vs_{celltypeB}.txt.gz", filtered_product_celltypes, celltypeA=config["celltypes"], celltypeB=config["celltypes"]),
        # expand(config["directories"]["results"]+"/rna/differential/metacells/celltype/{celltypeA}_vs_{celltypeB}.txt.gz", filtered_product_celltypes, celltypeA=config["celltypes"], celltypeB=config["celltypes"]),
        # expand(config["directories"]["results"]+"/rna/differential/pseudobulk/celltype/{celltypeA}_vs_{celltypeB}.txt.gz", filtered_product_celltypes, celltypeA=config["celltypes"], celltypeB=config["celltypes"]),


##################################################
## Load count matrices and create Seurat object ##
##################################################

rule create_seurat:
    input:
        script = config["scripts"]["create_seurat"],
        input_dir = config["directories"]["original_data"]
    output:
        seurat = config["directories"]["processed_data"]+"/seurat.rds",
        metadata = config["directories"]["processed_data"]+"/metadata.txt.gz"
    params:
        min_reads = config["create_seurat"]["min_reads"],
        outdir = config["directories"]["processed_data"],
        sample = expand("{sample}", sample=config["samples"])
    conda:
        "environment.yaml"
    threads: 
        config["slurm"]["create_seurat"]["threads"]
    resources:
        mem_mb = config["slurm"]["create_seurat"]["memory"]
    log: 
        "logs/create_seurat.log"
    shell:
        "Rscript {input.script} --inputdir {input.input_dir} --min_reads {params.min_reads} --outdir {params.outdir} --samples {params.sample} > {log}"

#####################
## Quality control ##
#####################

rule qc:
    input:
    	metadata = rules.create_seurat.output.metadata,
        script = config["scripts"]["qc"]
    output:
        metadata = config["directories"]["results"]+"/rna/qc/sample_metadata_after_qc.txt.gz"
    params:
        sample = expand("{sample}", sample=config["samples"]),
        min_nCount_RNA = config["qc"]["min_nCount_RNA"],
        max_nCount_RNA = config["qc"]["max_nCount_RNA"],
        min_nFeature_RNA = config["qc"]["min_nFeature_RNA"],
        max_nFeature_RNA = config["qc"]["max_nFeature_RNA"],
        percent_mt = config["qc"]["percent_mt"],
        percent_rib = config["qc"]["percent_rib"],
        outdir=config["directories"]["results"]+"/rna/qc"
    conda:
        "environment.yaml"
    log: 
        "logs/qc.log"
    threads: 
        config["slurm"]["qc"]["threads"]
    resources:
        mem_mb = config["slurm"]["qc"]["memory"]
    shell:
        "Rscript {input.script} --metadata {input.metadata} --outputdir {params.outdir} --samples {params.sample} --min_nCount_RNA {params.min_nCount_RNA} \
        --max_nCount_RNA {params.max_nCount_RNA} --min_nFeature_RNA {params.min_nFeature_RNA} --max_nFeature_RNA {params.max_nFeature_RNA} \
        --ribosomal_percent_RNA {params.percent_rib} --mitochondrial_percent_RNA {params.percent_mt} > {log}"

###################################################
## Convert Seurat object to SingleCellExperiment ##
###################################################

rule seurat_to_sce:
    input:
        seurat = rules.create_seurat.output.seurat,
    	metadata = rules.qc.output.metadata,
        script = config["scripts"]["seurat_to_sce"],
    output:
        config["directories"]["processed_data"]+"/SingleCellExperiment.rds",
    conda:
        "environment.yaml"
    log: 
        "logs/seurat_to_sce.log"
    threads: 
        config["slurm"]["seurat_to_sce"]["threads"]
    resources:
        mem_mb = config["slurm"]["seurat_to_sce"]["memory"]
    shell:
        "Rscript {input.script} --seurat {input.seurat} --metadata {input.metadata} --outfile {output} > {log}"

#######################
## Doublet detection ##
#######################

#rule doublet_detection:
#    input:
#        sce = rules.seurat_to_sce.output,
#        metadata = rules.qc.output.metadata,
#        script = config["scripts"]["doublet_detection"]
#    output:
#        outfile = expand(config["directories"]["results"]+"/rna/doublet_detection/doublets_{sample}.txt.gz", sample=config["samples"])
#    params:
#        samples = config["samples"],
#        doublet_score_threshold = config["doublet_detection"]["doublet_score_threshold"],
#        outdir = config["directories"]["results"]+"/rna/doublet_detection"
#    conda:
#        "environment.yaml"
#    log: 
#        "logs/doublet_detection.log"
#    threads: 
#        config["slurm"]["doublet_detection"]["threads"]
#    resources:
#        mem_mb = config["slurm"]["doublet_detection"]["memory"]
#    shell:
#        "Rscript {input.script} --metadata {input.metadata} --sce {input.sce} --samples {params.samples} \
#        --doublet_score_threshold {params.doublet_score_threshold}  --outdir {params.outdir} > {log}"

rule doublet_detection:
    input:
        sce = rules.seurat_to_sce.output,
        metadata = rules.qc.output.metadata,
        script = config["scripts"]["doublet_detection"]
    output:
        outfile = config["directories"]["results"]+"/rna/doublet_detection/doublets_{sample}.txt.gz"
    params:
        doublet_score_threshold = config["doublet_detection"]["doublet_score_threshold"]
    log: 
        "logs/doublet_detection_{sample}.log"
    threads: 
        config["slurm"]["doublet_detection"]["threads"]
    resources:
        mem_mb = config["slurm"]["doublet_detection"]["memory"]
    shell:
        "Rscript {input.script} --metadata {input.metadata} --sce {input.sce} --samples {wildcards.sample} \
        --doublet_score_threshold {params.doublet_score_threshold}  --outfile {output.outfile} > {log}"

rule parse_doublet_results:
    input:
        metadata = rules.qc.output.metadata,
        script = config["scripts"]["parse_doublets"],
        # doublet_files = expand(config["directories"]["results"]+"/rna/doublet_detection/doublets_{sample}.txt.gz", sample=config["samples"])
        doublet_files = expand(rules.doublet_detection.output, sample=config["samples"])
    output:
        config["directories"]["results"]+"/rna/doublet_detection/sample_metadata_after_doublets.txt.gz"
    conda:
        "environment.yaml"
    log: 
        "logs/parse_doublet_results.log"
    threads: 
        config["slurm"]["parse_doublet_results"]["threads"]
    resources:
        mem_mb = config["slurm"]["parse_doublet_results"]["memory"]
    shell:
        "Rscript {input.script} --metadata {input.metadata} --doublet_files {input.doublet_files} --outfile {output} > {log}"

##########################
## Mapping to the atlas ##
##########################

rule mapping_mnn:
    input:
        atlas_sce = config["directories"]["atlas"]+"/processed/SingleCellExperiment.rds",
    	atlas_metadata = config["directories"]["atlas"]+"/sample_metadata_extended.txt.gz",
        query_sce = rules.seurat_to_sce.output,
        query_metadata = rules.parse_doublet_results.output,
        script = config["scripts"]["mapping_mnn"]
    output:
        config["directories"]["results"]+"/rna/mapping/mapping_mnn_{sample}.txt.gz"
    params:
        atlas_stages=config["mapping_mnn"]["atlas_stages"],
        npcs = config["mapping_mnn"]["npcs"],
        n_neighbours = config["mapping_mnn"]["n_neighbours"]
    conda:
        "environment.yaml"
    log: 
        "logs/mapping_mnn_{sample}.log"
    threads: 
        config["slurm"]["mapping_mnn"]["threads"]
    resources:
        mem_mb = config["slurm"]["mapping_mnn"]["memory"]
    shell:
        "Rscript {input.script} --query_samples {wildcards.sample} --atlas_stages {params.atlas_stages} --query_sce {input.query_sce} \
        --atlas_sce {input.atlas_sce} --atlas_metadata {input.atlas_metadata} --query_metadata {input.query_metadata} \
        --npcs {params.npcs} --n_neighbours {params.n_neighbours} --outfile {output} > {log}"

rule parse_mapping_results:
    input:
        query_metadata = rules.parse_doublet_results.output,
        # mapping_mnn = expand(config["directories"]["results"]+"/rna/mapping/mapping_mnn_{sample}.txt.gz", sample=config["samples"]),
        mapping_mnn = expand(rules.mapping_mnn.output, sample=config["samples"]),
        script = config["scripts"]["parse_mapping"]
    output:
        config["directories"]["results"]+"/rna/mapping/sample_metadata_after_mapping.txt.gz"
    conda:
        "environment.yaml"
    log: 
        "logs/parse_mapping_results.log"
    threads: 
        config["slurm"]["parse_mapping_results"]["threads"]
    resources:
        mem_mb = config["slurm"]["parse_mapping_results"]["memory"]
    shell:
        "Rscript {input.script} --metadata {input.query_metadata} --mapping_mnn {input.mapping_mnn} --outfile {output} > {log}"

rule plot_mapping_results: 
    input:
        script = config["scripts"]["plot_mapping_results"],
        query_metadata = rules.parse_mapping_results.output,
        atlas_metadata = config["directories"]["atlas"]+"/sample_metadata_extended.txt.gz"
    output:
        config["directories"]["results"]+"/rna/mapping/pdf/umap_mapped_allcells.pdf"
    params:
        samples = expand("{sample}", sample=config["samples"]),
        outdir = config["directories"]["results"]+"/rna/mapping/pdf"
    log: 
        "logs/plot_mapping_results.log"
    threads: 
        config["slurm"]["plot_mapping_results"]["threads"]
    resources:
        mem_mb = config["slurm"]["plot_mapping_results"]["memory"]        
    shell:
        "Rscript {input.script} --query_metadata {input.query_metadata} --atlas_metadata {input.atlas_metadata} \
        --samples {params.samples} --outdir {params.outdir} > {log}"
        
        

################################
## Plot cell type proportions ##
################################

rule plot_celltype_proportions: 
    input:
        script = config["scripts"]["plot_celltype_proportions"],
        metadata = rules.parse_mapping_results.output
    output:
        config["directories"]["results"]+"/rna/celltype_proportions/{celltype_label}/finished.txt"    
    params:
        celltype_label = config["plot_celltype_proportions"]["celltype_label"],
        outdir = config["directories"]["results"]+"/rna/celltype_proportions/{celltype_label}"
    log: 
        "logs/plot_celltype_proportions_{celltype_label}.log"
    threads: 
        config["slurm"]["plot_celltype_proportions"]["threads"]
    resources: 
        mem_mb = config["slurm"]["plot_celltype_proportions"]["memory"]
    shell:
        "Rscript {input.script} --metadata {input.metadata} --celltype_label {wildcards.celltype_label} --outdir {params.outdir} > {log}"

####################
## Create anndata ##
####################

rule convert_SingleCellExperiment_to_anndata: 
    input:
        script = config["scripts"]["convert_SingleCellExperiment_to_anndata"],
        metadata = rules.parse_mapping_results.output,
        sce = rules.seurat_to_sce.output
    output:
        config["directories"]["processed_data"] + "/anndata.h5ad"
    params:
        python = config["resources"]["python"]
    conda:
        "environment.yaml"
    log: 
        "logs/convert_SingleCellExperiment_to_anndata.log"
    threads: 
        config["slurm"]["convert_SingleCellExperiment_to_anndata"]["threads"]
    resources: 
        mem_mb = config["slurm"]["convert_SingleCellExperiment_to_anndata"]["memory"]
    shell:
        "Rscript {input.script} --python_path {params.python} --sce {input.sce} --metadata {input.metadata} --outfile {output} > {log}"

##############################
## Dimensionality reduction ##
##############################

rule dimensionality_reduction_sce: 
    input:
        script=config["scripts"]["dimensionality_reduction_sce"],
        sce=rules.seurat_to_sce.output,
        metadata=rules.parse_mapping_results.output
    output:
        config["directories"]["results"]+"/rna/dimensionality_reduction/sce/{batch_correction}/pca_features{dimred_sce_features}_pcs{dimred_sce_npcs}.txt.gz"
    params:
        outdir = config["directories"]["results"]+"/rna/dimensionality_reduction/sce/{batch_correction}",
        n_neighbors = config["dimensionality_reduction_sce"]["n_neighbors"],
        min_dist = config["dimensionality_reduction_sce"]["min_dist"],
        vars_to_regress = config["dimensionality_reduction_sce"]["vars_to_regress"],
        batch_correction = config["dimensionality_reduction_sce"]["batch_correction"],
        colour_by = config["dimensionality_reduction_sce"]["colour_by"],
        sample = expand("{sample}", sample=config["samples"]),
    log: 
        "logs/dimensionality_reduction_features{dimred_sce_features}_batch{batch_correction}_pcs{dimred_sce_npcs}.log"
        # "logs/dimensionality_reduction_features{dimred_sce_features}_pcs{dimred_sce_npcs}_neigh{n_neighbors}_dist{min_dist}.log"
    threads: 
        config["slurm"]["dimensionality_reduction_sce"]["threads"]
    resources:
        mem_mb = config["slurm"]["dimensionality_reduction_sce"]["memory"]
    shell:
        "Rscript {input.script} --sce {input.sce} --metadata {input.metadata} --npcs {wildcards.dimred_sce_npcs} --features {wildcards.dimred_sce_features} \
        --vars_to_regress {params.vars_to_regress} --samples {params.sample} --batch_correction  {wildcards.batch_correction} \
        --n_neighbors {params.n_neighbors} --min_dist {params.min_dist} --colour_by {params.colour_by} --outdir {params.outdir} > {log}"

rule dimensionality_reduction_sce_per_stage: 
    input:
        script = config["scripts"]["dimensionality_reduction_sce"],
        sce = rules.seurat_to_sce.output,
        metadata = rules.parse_mapping_results.output
    output:
        # config["directories"]["results"]+"/rna/dimensionality_reduction/umap_features{dimred_sce_features}_pcs{dimred_sce_npcs}_neigh{n_neighbors}_dist{min_dist}.txt.gz",
        config["directories"]["results"]+"/rna/dimensionality_reduction/sce/per_day/{stage}/pca_features{dimred_sce_features}_pcs{dimred_sce_npcs}.txt.gz"
    params:
        outdir = config["directories"]["results"]+"/rna/dimensionality_reduction/sce/per_day/{stage}",
        n_neighbors = config["dimensionality_reduction_sce"]["n_neighbors"],
        min_dist = config["dimensionality_reduction_sce"]["min_dist"],
        vars_to_regress = config["dimensionality_reduction_sce"]["vars_to_regress"],
        colour_by = config["dimensionality_reduction_sce"]["colour_by"]
    conda:
        "environment.yaml"
    log: 
        "logs/dimensionality_reduction_features{dimred_sce_features}_pcs{dimred_sce_npcs}_per_day_{stage}.log"
    threads: 
        config["slurm"]["dimensionality_reduction_sce"]["threads"]
    resources:
        mem_mb = config["slurm"]["dimensionality_reduction_sce"]["memory"]
    shell:
        "Rscript {input.script} --sce {input.sce} --stages {wildcards.stage} --metadata {input.metadata} --npcs {wildcards.dimred_sce_npcs} --features {wildcards.dimred_sce_features} \
        --vars_to_regress {params.vars_to_regress} --n_neighbors {params.n_neighbors} --min_dist {params.min_dist} --colour_by {params.colour_by} --outdir {params.outdir} > {log}"

################
## Pseudobulk ##
################

rule pseudobulk_rna:
    input:
        sce = rules.seurat_to_sce.output,
        metadata = rules.parse_mapping_results.output,
        script = config["scripts"]["pseudobulk_rna"]
    output:
        # seurat = config["directories"]["results"]+"/rna/pseudobulk/{group_by}/Seurat_pseudobulk.rds",
        sce = config["directories"]["results"]+"/rna/pseudobulk/{group_by}/SingleCellExperiment_pseudobulk.rds",
        stats = config["directories"]["results"]+"/rna/pseudobulk/{group_by}/stats.txt"
    params:
        outdir = config["directories"]["results"]+"/rna/pseudobulk/{group_by}"
    conda:
        "environment.yaml"
    log: 
        "logs/pseudobulk_rna_{group_by}.log"
    threads: 
        config["slurm"]["pseudobulk_rna"]["threads"]
    resources:
        mem_mb = config["slurm"]["pseudobulk_rna"]["memory"]
    shell:
        "Rscript {input.script} --sce {input.sce} --metadata {input.metadata} --group_by {wildcards.group_by} --outdir {params.outdir} > {log}"

rule pseudobulk_rna_with_replicates:
    input:
        sce = rules.seurat_to_sce.output,
        metadata = rules.parse_mapping_results.output,
        script = config["scripts"]["pseudobulk_rna_with_replicates"]
    output:
        sce = config["directories"]["results"]+"/rna/pseudobulk/{group_by}/SingleCellExperiment_pseudobulk_with_replicates.rds",
        cell2replicate = config["directories"]["results"]+"/rna/pseudobulk/{group_by}/cell2replicate.txt.gz"
    params:
        min_cells = config["pseudobulk_rna_with_replicates"]["min_cells"],
        nrep = config["pseudobulk_rna_with_replicates"]["nrep"],
        fraction_cells_per_replicate = config["pseudobulk_rna_with_replicates"]["fraction_cells_per_replicate"],
        outdir = config["directories"]["results"]+"/rna/pseudobulk/{group_by}"
    conda:
        "environment.yaml"
    log: 
        "logs/pseudobulk_rna_with_replicates_{group_by}.log"
    threads: 
        config["slurm"]["pseudobulk_rna_with_replicates"]["threads"]
    resources:
        mem_mb = config["slurm"]["pseudobulk_rna_with_replicates"]["memory"]
    shell:
        "Rscript {input.script} --sce {input.sce} --metadata {input.metadata} --group_by {wildcards.group_by} --nrep {params.nrep} \
        --min_cells {params.min_cells} --fraction_cells_per_replicate {params.fraction_cells_per_replicate} --outdir {params.outdir} > {log}"

####################################
## Validate cell type assignments ##
####################################

rule celltype_validation_single_cells: 
     input:
         script=config["scripts"]["celltype_validation_single_cells"],
         sce=rules.seurat_to_sce.output,
         metadata=rules.parse_mapping_results.output,
         umap = expand("%s/rna/dimensionality_reduction/sce/batch_correction_{batch_variable}/umap_features{dimred_sce_features}_pcs{dimred_sce_npcs}_neigh{n_neighbors}_dist{min_dist}.txt.gz" % (config["directories"]["results"]), 
            dimred_sce_features = 2500, 
            batch_variable = 'None', 
            dimred_sce_npcs = 50,
            n_neighbors = 25,
            min_dist = 0.5     
            )
     output:
         expand(config["directories"]["results"]+"/rna/celltype_validation/single_cells/umap_{celltype_validation_sc_celltype}_markers.pdf",
             celltype_validation_sc_celltype=config["celltypes"]
             )
     params:
         outdir = config["directories"]["results"]+"/rna/celltype_validation/single_cells",
         marker_genes_file = config["resources"]["marker_genes"],
         # umap = config["resources"]["umap"],
         celltype_label = config["celltype_validation_single_cells"]["celltype_label"],
         celltype_validation_sc_celltype = config["celltypes"]
     conda:
         "environment.yaml"
     log: 
         "logs/celltype_validation_single_cells_markers.log" #_{celltype_validation_sc_celltype}
     threads: 
         config["slurm"]["celltype_validation_single_cells"]["threads"]
     resources: 
         mem_mb = config["slurm"]["celltype_validation_single_cells"]["memory"]
     shell:
         "Rscript {input.script} --sce {input.sce} --metadata {input.metadata} --marker_genes_file {params.marker_genes_file} \
         --celltype_label {params.celltype_label} --celltypes {params.celltype_validation_sc_celltype} --umap {input.umap} \
         --outdir {params.outdir} > {log}"

#############################
## Differential expression ##
#############################
